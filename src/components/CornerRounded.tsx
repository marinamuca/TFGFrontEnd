/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 public/models/cornerRounded.glb -t
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Vector3 } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Pared: THREE.Mesh
    Suelo: THREE.Mesh
  }
  materials: {
    MaterialPared: THREE.MeshStandardMaterial
    MaterialSuelo: THREE.MeshStandardMaterial
  }
}

interface positionModifiers {
  x?: number;
  y?: number;
  z?: number;
}

export function CornerRounded(props: JSX.IntrinsicElements['group'], pos: positionModifiers) {
  const { nodes, materials } = useGLTF('/models/cornerRounded.glb') as GLTFResult
  const position = [0 + (pos.x || 0), 1.3 + (pos.y || 0), 0 + (pos.z || 0)] as Vector3
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Pared.geometry} material={materials.MaterialPared} position={position} />
      <mesh geometry={nodes.Suelo.geometry} material={materials.MaterialSuelo} position={position} />
    </group>
  )
}

useGLTF.preload('/models/cornerRounded.glb')
