/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 ../../public/models/FloorRounded.glb -t
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { ColorProps } from '@react-three/fiber'
import { ColorRepresentation, MeshStandardMaterial } from 'three'

type GLTFResult = GLTF & {
  nodes: {
    Suelo: THREE.Mesh
  }
  materials: {
    MaterialSuelo: THREE.MeshStandardMaterial
  }
}

interface propsFloor{
  groupProps: JSX.IntrinsicElements['group'];
  material?: THREE.Material
}

export function FloorRounded(props: propsFloor) {
  const { nodes, materials } = useGLTF('/models/FloorRounded.glb') as GLTFResult

  let material = materials.MaterialSuelo as THREE.Material
  if (props.material){
    material = props.material
  }

  return (
    <group {...props.groupProps} dispose={null} >
      <mesh  geometry={nodes.Suelo.geometry} material={material} position={[0, 1.3, 0]}  />
    </group>
  )
}

useGLTF.preload('/models/FloorRounded.glb')
