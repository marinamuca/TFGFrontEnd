/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 -t ../blenderModels/box_comp.glb
*/

import { useTexture } from '@react-three/drei';
import * as THREE from 'three'

interface IllustrationProps{
  meshProps?: JSX.IntrinsicElements['mesh'];
  imgUrl?: string
  maxSize?: number

}

export function Illustration(props: IllustrationProps ) {
  let texture 
  let planeHeight = props.maxSize || 1
  let planeWidth = planeHeight / 2

  if(props.imgUrl){
    texture = useTexture(props.imgUrl)
    planeHeight = texture.image.height
    planeWidth = texture.image.width

    if(planeHeight > planeWidth){
      planeWidth = planeWidth / planeHeight;
      planeHeight = 1;
    } else {
      planeHeight = planeHeight / planeWidth;
      planeWidth = 1;
    }
  }

  return (
    <mesh {...props.meshProps}>
      <planeBufferGeometry  attach="geometry"
                            args={[planeWidth, planeHeight]}  />
      <meshStandardMaterial map={texture} color={props.imgUrl? 0xffffff : 0x00ffff}/>
    </mesh>
  )
}
